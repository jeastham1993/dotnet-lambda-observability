AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for dotnet-lambda-observability

Globals:
  Function:
    Timeout: 120
    MemorySize: 512
    Layers:
      - arn:aws:lambda:eu-west-1:901920570463:layer:aws-otel-collector-amd64-ver-0-61-0:1
    Runtime: dotnet6
    Architectures:
      - x86_64
    Environment:
      Variables:
        OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/config.yaml
        HONEYCOMB_API_KEY: !Ref HoneycombApiKey
    
Parameters:
  HoneycombApiKey:
    NoEcho: true
    Description: The API Key for honeycomb
    Type: String
    MinLength: 1

Resources:
  ObservableLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./ObservableLambda/
      Timeout: 30
      Handler: ObservableLambda::ObservableLambda.Function::TracedFunctionHandler
      Environment:
        Variables:
          TOPIC_ARN: !Ref PublishTopic
          TABLE_NAME: !Ref ObservableLambdaTable
      Policies:
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt PublishTopic.TopicName
      - DynamoDBWritePolicy:
          TableName: !Ref ObservableLambdaTable
      Events:
        ApiEndpoint:
          Type: Api
          Properties:
            Path: /observe-me
            Method: POST
            
  
  BatchProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./ObservableLambda.Processor.Batch/
      Handler: ObservableLambda.Processor.Batch::ObservableLambda.Processor.Batch.Function::TracedFunctionHandler
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BatchProcessingQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
  
  SingleMessageProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./ObservableLambda.Processor.SingleMessage/
      Handler: ObservableLambda.Processor.SingleMessage::ObservableLambda.Processor.SingleMessage.Function::TracedFunctionHandler
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UserOnBoardingWorkflowStateMachine
      Policies:
      - StepFunctionsExecutionPolicy:
          StateMachineName: UserOnBoardingWorkflow 
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SingleMessageQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
            
  
  PublishTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt BatchProcessingQueue.Arn
          Protocol: "sqs"
        - Endpoint: !GetAtt SingleMessageQueue.Arn
          Protocol: "sqs"

  BatchProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "batch-processing-queue"
      VisibilityTimeout: 120

  SingleMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "single-message-queue"
      VisibilityTimeout: 120
  
  AllowSnsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SingleMessageQueue
        - !Ref BatchProcessingQueue
      PolicyDocument:
        Statement:
          -
            Action:
              - "SQS:SendMessage"
            Effect: "Allow"
            Resource:
              - !GetAtt SingleMessageQueue.Arn
              - !GetAtt BatchProcessingQueue.Arn
            Principal:
              Service:
                - "sns.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref PublishTopic

  ObservableLambdaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  UserOnBoardingWorkflowStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/user_onboarding.asl.json
      Name: UserOnBoardingWorkflow
      Logging:
        IncludeExecutionData: true
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ObservableLambdaTable
Outputs:
  ObservableLambdaApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/observe-me/"
